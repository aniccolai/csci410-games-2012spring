class Tilesets {
	function void drawPlayerRight(int x, int y) {
        var int offset;
        let offset = x + (512 * y);

        do Memory.poke(16384 + offset, 1984);
        do Memory.poke(16416 + offset, 4064);
        do Memory.poke(16448 + offset, 3568);
        do Memory.poke(16480 + offset, 1992);
        do Memory.poke(16512 + offset, 4064);
        do Memory.poke(16544 + offset, 16376);
        do Memory.poke(16576 + offset, -4);
        do Memory.poke(16608 + offset, -18434);
        do Memory.poke(16640 + offset, 18410);
        do Memory.poke(16672 + offset, 4068);
        do Memory.poke(16704 + offset, 4032);
        do Memory.poke(16736 + offset, 8160);
        do Memory.poke(16768 + offset, 15600);
        do Memory.poke(16800 + offset, 14448);
        do Memory.poke(16832 + offset, 7280);
        do Memory.poke(16864 + offset, 3120);

		return;
	}

	function void drawPlayerLeft(int x, int y) {
        var int offset;
        let offset = x + (512 * y);

        do Memory.poke(16384 + offset, 992);
        do Memory.poke(16416 + offset, 2032);
        do Memory.poke(16448 + offset, 4016);
        do Memory.poke(16480 + offset, 5088);
        do Memory.poke(16512 + offset, 2032);
        do Memory.poke(16544 + offset, 8188);
        do Memory.poke(16576 + offset, 16383);
        do Memory.poke(16608 + offset, 32749);
        do Memory.poke(16640 + offset, 22498);
        do Memory.poke(16672 + offset, 10224);
        do Memory.poke(16704 + offset, 1008);
        do Memory.poke(16736 + offset, 2040);
        do Memory.poke(16768 + offset, 3900);
        do Memory.poke(16800 + offset, 3612);
        do Memory.poke(16832 + offset, 3640);
        do Memory.poke(16864 + offset, 3120);

		return;
	}

	function void drawChamberBlock(int offset, int blockNumber) {
		var Array chamber;
		var int blockType;
		let chamber = Chambers.getRoom();
		let blockType = chamber[blockNumber];

		if(blockType = 0) {
			do Memory.poke(16384 + offset, 0);
			do Memory.poke(16416 + offset, 0);
			do Memory.poke(16448 + offset, 0);
			do Memory.poke(16480 + offset, 0);
			do Memory.poke(16512 + offset, 0);
			do Memory.poke(16544 + offset, 0);
			do Memory.poke(16576 + offset, 0);
			do Memory.poke(16608 + offset, 0);
			do Memory.poke(16640 + offset, 0);
			do Memory.poke(16672 + offset, 0);
			do Memory.poke(16704 + offset, 0);
			do Memory.poke(16736 + offset, 0);
			do Memory.poke(16768 + offset, 0);
			do Memory.poke(16800 + offset, 0);
			do Memory.poke(16832 + offset, 0);
			do Memory.poke(16864 + offset, 0);
		}

		if(blockType = 1) {
			do Memory.poke(16384 + offset, -21846);
			do Memory.poke(16416 + offset, 21845);
			do Memory.poke(16448 + offset, -21846);
			do Memory.poke(16480 + offset, 21845);
			do Memory.poke(16512 + offset, -21846);
			do Memory.poke(16544 + offset, 21845);
			do Memory.poke(16576 + offset, -21846);
			do Memory.poke(16608 + offset, 21845);
			do Memory.poke(16640 + offset, -21846);
			do Memory.poke(16672 + offset, 21845);
			do Memory.poke(16704 + offset, -21846);
			do Memory.poke(16736 + offset, 21845);
			do Memory.poke(16768 + offset, -21846);
			do Memory.poke(16800 + offset, 21845);
			do Memory.poke(16832 + offset, -21846);
			do Memory.poke(16864 + offset, 21845);
		}

		if(blockType = 2) {
			do Memory.poke(16384 + offset, -1);
			do Memory.poke(16416 + offset, -1);
			do Memory.poke(16448 + offset, -1);
			do Memory.poke(16480 + offset, -1);
			do Memory.poke(16512 + offset, -1);
			do Memory.poke(16544 + offset, -1);
			do Memory.poke(16576 + offset, -1);
			do Memory.poke(16608 + offset, -1);
			do Memory.poke(16640 + offset, -1);
			do Memory.poke(16672 + offset, -1);
			do Memory.poke(16704 + offset, -1);
			do Memory.poke(16736 + offset, -1);
			do Memory.poke(16768 + offset, -1);
			do Memory.poke(16800 + offset, -1);
			do Memory.poke(16832 + offset, -1);
			do Memory.poke(16864 + offset, -1);
		}
		if(blockType = 3) {
			do Memory.poke(16384 + offset, 4080);
			do Memory.poke(16416 + offset, 4080);
			do Memory.poke(16448 + offset, 4080);
			do Memory.poke(16480 + offset, 4080);
			do Memory.poke(16512 + offset, 4080);
			do Memory.poke(16544 + offset, 4080);
			do Memory.poke(16576 + offset, 4080);
			do Memory.poke(16608 + offset, 4080);
			do Memory.poke(16640 + offset, 4080);
			do Memory.poke(16672 + offset, -1);
			do Memory.poke(16704 + offset, 32766);
			do Memory.poke(16736 + offset, 16380);
			do Memory.poke(16768 + offset, 8184);
			do Memory.poke(16800 + offset, 2016);
			do Memory.poke(16832 + offset, 960);
			do Memory.poke(16864 + offset, 384);
		}
		return;
	}

	function void drawCursorValid(int x, int y) {
		var int offset;
		let offset = x + (512 * y);

        do Memory.poke(16384 + offset, -1);
        do Memory.poke(16416 + offset, -32767);
        do Memory.poke(16448 + offset, -32767);
        do Memory.poke(16480 + offset, -32767);
        do Memory.poke(16512 + offset, -32767);
        do Memory.poke(16544 + offset, -32767);
        do Memory.poke(16576 + offset, -32767);
        do Memory.poke(16608 + offset, -32767);
        do Memory.poke(16640 + offset, -32767);
        do Memory.poke(16672 + offset, -32767);
        do Memory.poke(16704 + offset, -32767);
        do Memory.poke(16736 + offset, -32767);
        do Memory.poke(16768 + offset, -32767);
        do Memory.poke(16800 + offset, -32767);
        do Memory.poke(16832 + offset, -32767);
        do Memory.poke(16864 + offset, -1);

		return;
	}

	function void drawInvalidCursor(int x, int y) {
		var int offset;
		let offset = x + (512 * y);

		do Memory.poke(16384 + offset, -1);
		do Memory.poke(16416 + offset, -32767);
		do Memory.poke(16448 + offset, -24571);
		do Memory.poke(16480 + offset, -28663);
		do Memory.poke(16512 + offset, -30703);
		do Memory.poke(16544 + offset, -31711);
		do Memory.poke(16576 + offset, -32191);
		do Memory.poke(16608 + offset, -32639);
		do Memory.poke(16640 + offset, -32511);
		do Memory.poke(16672 + offset, -32191);
		do Memory.poke(16704 + offset, -31711);
		do Memory.poke(16736 + offset, -30703);
		do Memory.poke(16768 + offset, -28663);
		do Memory.poke(16800 + offset, -24571);
		do Memory.poke(16832 + offset, -32767);
		do Memory.poke(16864 + offset, -1);

		return;
	}

	function void drawPortalLeft(int offset) {
		do Memory.poke(16384 + offset, -1);
		do Memory.poke(16416 + offset, -1);
		do Memory.poke(16448 + offset, -1);
		do Memory.poke(16480 + offset, -1);
		do Memory.poke(16512 + offset, -4096);
		do Memory.poke(16544 + offset, -4096);
		do Memory.poke(16576 + offset, -4096);
		do Memory.poke(16608 + offset, -4096);
		do Memory.poke(16640 + offset, -4096);
		do Memory.poke(16672 + offset, -4096);
		do Memory.poke(16704 + offset, -4096);
		do Memory.poke(16736 + offset, -4096);
		do Memory.poke(16768 + offset, -1);
		do Memory.poke(16800 + offset, -1);
		do Memory.poke(16832 + offset, -1);
		do Memory.poke(16864 + offset, -1);
	
		return;
	}

	function void drawPortalUp(int offset) {
		do Memory.poke(16384 + offset, -4081);
		do Memory.poke(16416 + offset, -4081);
		do Memory.poke(16448 + offset, -4081);
		do Memory.poke(16480 + offset, -4081);
		do Memory.poke(16512 + offset, -4081);
		do Memory.poke(16544 + offset, -4081);
		do Memory.poke(16576 + offset, -4081);
		do Memory.poke(16608 + offset, -4081);
		do Memory.poke(16640 + offset, -4081);
		do Memory.poke(16672 + offset, -4081);
		do Memory.poke(16704 + offset, -4081);
		do Memory.poke(16736 + offset, -4081);
		do Memory.poke(16768 + offset, -1);
		do Memory.poke(16800 + offset, -1);
		do Memory.poke(16832 + offset, -1);
		do Memory.poke(16864 + offset, -1);

		return;
	}

	function void drawPortalRight(int offset) {
		do Memory.poke(16384 + offset, -1); 
		do Memory.poke(16416 + offset, -1); 
		do Memory.poke(16448 + offset, -1); 
		do Memory.poke(16480 + offset, -1); 
		do Memory.poke(16512 + offset, 15); 
		do Memory.poke(16544 + offset, 15); 
		do Memory.poke(16576 + offset, 15); 
		do Memory.poke(16608 + offset, 15); 
		do Memory.poke(16640 + offset, 15); 
		do Memory.poke(16672 + offset, 15); 
		do Memory.poke(16704 + offset, 15); 
		do Memory.poke(16736 + offset, 15); 
		do Memory.poke(16768 + offset, -1); 
		do Memory.poke(16800 + offset, -1); 
		do Memory.poke(16832 + offset, -1); 
		do Memory.poke(16864 + offset, -1); 

		return;
	}

	function void drawPortalDown(int offset) {
		do Memory.poke(16384 + offset, -1);
		do Memory.poke(16416 + offset, -1);
		do Memory.poke(16448 + offset, -1);
		do Memory.poke(16480 + offset, -1);
		do Memory.poke(16512 + offset, -4081);
		do Memory.poke(16544 + offset, -4081);
		do Memory.poke(16576 + offset, -4081);
		do Memory.poke(16608 + offset, -4081);
		do Memory.poke(16640 + offset, -4081);
		do Memory.poke(16672 + offset, -4081);
		do Memory.poke(16704 + offset, -4081);
		do Memory.poke(16736 + offset, -4081);
		do Memory.poke(16768 + offset, -4081);
		do Memory.poke(16800 + offset, -4081);
		do Memory.poke(16832 + offset, -4081);
		do Memory.poke(16864 + offset, -4081);

		return;
	}
}
