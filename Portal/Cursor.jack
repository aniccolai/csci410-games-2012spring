/* The Cursor class is used for aiming purposes to determine where a portal can be placed on the screen */

class Cursor {
	// location of cursor on the screen (where one grid square is 16x16 pixels)
	field int x, y;
	field boolean valid;
	field Player player;
	field int aim;         // 0,1 down
	                       // 2 down left
						   // 3 down right
						   // 4 left
						   // 5 right
						   // 6 up left
						   // 7 up right
						   // 8,9 up
						   // odds aim right, evens left

	// create a new cursor object
	constructor Cursor new(Player P) {
		let x = 0;
		let y = 0;
		let aim = 5;
		let valid = false;
		let player = P;
		return this;
	}

	method boolean isValid() {
		return valid;
	}

	// shift cursor to aim left
	method void moveLeft() {
		var int quotient;
		
		// subtract 1 if an odd number, leave alone if it's even
		let quotient = aim / 2;
		let aim = 2 * quotient;
		return;
	}

	// shift cursor to aim right
	method void moveRight() { 
		var int quotient;
		
		// add 1 if an even number, leave alone if it's odd
		let quotient = aim / 2;
		let aim = (2 * quotient) + 1;
		return;
	}

	// move angle up
	method void moveUp() {
		// add 2 to change aim angle
		if(aim < 8) { let aim = aim + 2; }
		return;
	}

	// move angle down
	method void moveDown() {
		// sub 2 to change aim angle
		if(aim > 1) { let aim = aim - 2; }
		return;
	}

	// calculates the nearest block the cursor can be displayed upon (depends on aim angle)
	method void updatePos() {
		var Array chamber;
		var int offset;

		do clearDraw();
		let chamber = Chambers.getRoom();
		let x = player.getX();
		let y = player.getY();
		let offset = (y * 32) + x;

		// up
		if(aim > 7) {
			while(y > 0) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let y = y - 1;
				let offset = offset - 32;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}

		// down
		if(aim < 2) {
			while(y < 15) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let y = y + 1;
				let offset = offset + 32;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}

		// down left
		if(aim = 2) {
			while(x > 0 & y < 15) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let x = x - 1;
				let y = y + 1;
				let offset = offset + 31;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}
		
		// down right
		if(aim = 3) {
			while(x < 31 & y < 15) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let x = x + 1;
				let y = y + 1;
				let offset = offset + 33;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}
		
		// left
		if(aim = 4) {
			while(x > 0) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let x = x - 1;
				let offset = offset - 1;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}
		
		// right
		if(aim = 5) {
			while(x < 31) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let x = x + 1;
				let offset = offset + 1;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}
		
		// up left
		if(aim = 6) {
			while(x > 0 & y > 0) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
					return;
				}
				let x = x - 1;
				let y = y - 1;
				let offset = offset - 33;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}
		
		// up right
		if(aim = 7) {
			while(x < 31 & y > 0) {
				if(chamber[offset] > 0) {
					if(chamber[offset] = 1) { let valid = true; }
					else { let valid = false; }
				return;
				}
				let x = x + 1;
				let y = y - 1;
				let offset = offset - 31;
			}
			if(chamber[offset] = 1) { let valid = true; }
			else { let valid = false; }
			return;
		}
		return;
	}

	// draw cursor to screen
	method void draw() {
		if(valid) { do Tilesets.drawCursorValid(x, y); }
		else { do Tilesets.drawInvalidCursor(x, y); }
		return;
	}

	method void clearDraw() {
		var int offset;
		let offset = x + (512 * y);
		do Tilesets.drawChamberBlock(offset, x + (32 * y));
		return;
	}
	
	method int getX() {
		return x;
	}
	
	method int getY(){
		return y;
	}
}
