class Wall
{
	field int direction;
	field int xOrigin, yOrigin; // positions within the grid, not screen pixels
	field int xEnd, yEnd;
	field int xIncrement, yIncrement;
	field Map map;

	// 0 = up, 1 = right, 2 = down, 3 = left
	constructor Wall new(int setDirection, int setXOrigin, int setYOrigin, Map setMap) {
		let direction = setDirection;
		let xOrigin = setXOrigin;
		let yOrigin = setYOrigin;
		let xEnd = xOrigin;
		let yEnd = yOrigin;
		let xIncrement = 0;
		let yIncrement = 0;
		let map = setMap;

		if (direction = 0) {
			let yIncrement = -1;
		} else {
			if (direction = 1) {
				let xIncrement = 1;
			} else {
				if (direction = 2) {
					let yIncrement = 1;
				} else {
					let xIncrement = -1;
				}
			}
		}

		return this;
	}

	method void dispose() {
		do Memory.deAlloc(this);
		return;
	}

	method boolean containsBlock(int x, int y) {
		if (direction = 0) {
			return (x = xOrigin) & ((y - 2) < yOrigin) & ((y + 2) > yEnd);
		} else {
			if (direction = 1) {
				return (y = yOrigin) & ((x + 2) > xOrigin) & ((x - 2) < xEnd);
			} else {
				if (direction = 2) {
					return (x = xOrigin) & ((y + 2) > yOrigin) & ((y - 2) < yEnd);
				} else {
					return (y = yOrigin) & ((x - 2) < xOrigin) & ((x + 2) > xEnd);
				}
			}
		}
	}

	method boolean vertical() {
		return (direction = 0) | (direction = 2);
	}

	method void construct() {
		let xEnd = xEnd + xIncrement;
		let yEnd = yEnd + yIncrement;

		do Display.fillBlocks(xOrigin, yOrigin, xEnd, yEnd);

		return;
	}

	method boolean complete() {
		return map.blockAt(xEnd + xIncrement, yEnd + yIncrement);
	}

	method void save() {
		do map.fillBlocks(xOrigin, yOrigin, xEnd, yEnd);
		return;
	}

	method void erase() {
		do Display.eraseBlocks(xOrigin, yOrigin, xEnd, yEnd);
		return;
	}
}