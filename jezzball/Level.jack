class Level
{
	field int levelNum;
	field int numLives;
	field Cursor cursor;
	field int numBalls;
	field Array balls;
	field Wall wall1;
	field Wall wall2;
	field Map map;

	constructor Level new(int setLevelNum) {
		var int i;
		var int numColumns, numRows, numBlocks;

		let numColumns = Display.numColumns(); // cache these values for performance
		let numRows = Display.numRows();
		let numBlocks = Display.numBlocks();

		let levelNum = setLevelNum;
		let numBalls = setLevelNum + 1;
		let numLives = numBalls;

		let map = Map.new();

		let cursor = Cursor.new(numColumns/2, numRows/2, map);

		let balls = Array.new(numBalls);

		let wall1 = null;
		let wall2 = null;

		do Random.seed(levelNum + 200);

		let i = 0;
		while (i < numBalls) {
			let balls[i] = Ball.new(Random.between(0, numColumns), Random.between(0, numRows), map);
			let i = i + 1;
		}

		return this;
	}

	method void dispose() {
		var int i;
		var Ball ball;

		do cursor.dispose();
		let cursor = null;

		let i = 0;
		while (i < numBalls) {
			let ball = balls[i];
			do ball.dispose();
			let i = i + 1;
		}

		do balls.dispose();
		let balls = null;

		if (~(wall1 = null)) {
			do wall1.dispose();
			let wall1 = null;
		}
		if (~(wall2 = null)) {
			do wall2.dispose();
			let wall2 = null;
		}

		do map.dispose();
		let map = null;

		do Memory.deAlloc(this);
		return;
	}

	method void play() {
		var char key;
		var boolean updateMap;

		do Screen.clearScreen();
		do drawBorder();
		do drawTitle();

		let updateMap = false;

		while (~(key = 81) & (numLives > 0)) {
			if (~(wall1 = null)) {
				if (wall1.complete()) {
					do wall1.save();
					do wall1.dispose();
					let wall1 = null;
					do map.draw();
					let updateMap = true;
				} else {
					do wall1.construct();
				}
			}

			if (~(wall2 = null)) {
				if (wall2.complete()) {
					do wall2.save();
					do wall2.dispose();
					let wall2 = null;
					do map.draw();
					let updateMap = true;
				} else {
					do wall2.construct();
				}
			}

			if (updateMap & (wall1 = null) & (wall2 = null)) {
				do map.checkAreas(balls, numBalls);
				do map.draw();
				do drawTitle();
				if (map.percentFilled() > 74) {
					return;
				}

				let updateMap = false;
			}

			do Sys.wait(100);

			let key = Keyboard.keyPressed();

			if ((wall1 = null) & (wall2 = null)) {
				if (key = 65) {
					do startVerticalWall();
				} else {
					if (key = 83) {
						do startHorizontalWall();
					}
				}
			}

			do handleCollisions();
			do moveBalls();
			do cursor.move(key);
		}
		return;
	}

	method void drawBorder() {
		do Screen.setColor(true);
		do Screen.drawRectangle(0, 12, 5, 255); // left
		do Screen.drawRectangle(506, 12, 511, 255); // right
		do Screen.drawRectangle(0, 12, 511, 13); // top
		do Screen.drawRectangle(0, 254, 511, 255); // bottom

		return;
	}

	method void drawTitle() {
		do Screen.setColor(false);
		do Screen.drawRectangle(0, 0, 511, 11);
		do Output.moveCursor(0, 0);
		do Output.printString("Lives: ");
		do Output.printInt(numLives);
		do Output.moveCursor(0, 27);
		do Output.printString("Filled: ");
		do Output.printInt(map.percentFilled());
		do Output.printString("%");
		do Output.moveCursor(0, 55);
		do Output.printString("Level: ");
		do Output.printInt(levelNum);
		return;
	}

	method void moveBalls() {
		var int i;
		var Ball ball;

		let i = 0;
		while (i < numBalls) {
			let ball = balls[i];
			do ball.move();
			let i = i + 1;
		}
		return;
	}

	method void handleCollisions() {
		var int i;
		var Ball ball;

		let i = 0;
		while (i < numBalls) {
			let ball = balls[i];
			do ball.handleCollisions();

			if (~(wall1 = null)) {
				if (ball.collideWithWall(wall1)) {
					do wall1.erase();
					do wall1.dispose();
					let wall1 = null;
					let numLives = numLives - 1;
					do drawTitle();
				}
			}

			if (~(wall2 = null)) {
				if (ball.collideWithWall(wall2)) {
					do wall2.erase();
					do wall2.dispose();
					let wall2 = null;
					let numLives = numLives - 1;
					do drawTitle();
				}
			}

			let i = i + 1;
		}

		return;
	}

	method void startVerticalWall() {
		var int x, y;
		let x = cursor.getX();
		let y = cursor.getY();

		let wall1 = Wall.new(0, x, y, map);
		let wall2 = Wall.new(2, x, y + 1, map);
		return;
	}

	method void startHorizontalWall() {
		var int x, y;
		let x = cursor.getX();
		let y = cursor.getY();

		let wall1 = Wall.new(1, x, y, map);
		let wall2 = Wall.new(3, x - 1, y, map);
		return;
	}

	method boolean won() {
		return numLives > 0;
	}
}