class Player
{
	
	field Pokemon favorite;
	field boolean real, left;

	constructor Player new()
	{
		let real = false;
		let left = false;
		let favorite = Pokemon.new("???", "???", "???");
		return this;
	} 

	method void dispose() {
		do favorite.dispose();
        do Memory.deAlloc(this);
        return;
    }

	method void setPokemon(Pokemon p)
	{
		do favorite.copy(p);
		return;
	}

	method void setReal(bool r)
	{
		let real = r;
		return;
	}

	method void setLeft(bool l)
	{
		let left = l;
		return;
	}

	method Pokemon getPokemon() {return favorite;}

	method boolean getLeft() {return left;}

	method boolean isReal() {return real;}

	method String chooseMove()
	{
		var Array moves;
		var int min, max, x, y;
		var char key;
		var String move1, move2, move3, move4, final;

		let min = 0;
		let max = 1;
		let x = 0;
		let y = 0;

		let moves = favorite.getAttacks();
		let move1 = moves[0];
		let move2 = moves[1];
		let move3 = moves[2];
		let move4 = moves[3];

		do Sprite.drawDialog(move1,move2);
		do Output.moveCursor(19,30);
		do Output.printString(move3);
		do Output.moveCursor(20,30);
		do Output.printString(move4);

		do Sprite.drawCursor(0, 150, 210, true);

		if (real)
		{
			do Battle.waitKeyUp();
			let key = Battle.getKey();
			while (~(key = 128))
			{
				let key = Battle.getKey();
				do Battle.waitKeyUp();
				do Sprite.drawCursor(x, 150+(x*16), 210+(y*11), false);
				if (key = 133)
				{
					if (~(y = max))
					{
						let y = y + 1;
					}
				}
				if (key = 131)
				{
					if (~(y = min))
					{
						let y = y - 1;
					}
				}
				if (key = 132)
				{
					if (~(x = max))
					{
						let x = x + 1;
					}
				}
				if (key = 130)
				{
					if (~(x = min))
					{
						let x = x - 1;
					}
				}
				do Sprite.drawCursor(x, 150+(x*16), 210+(y*11), true);
			}
		}
		else
		{
			do Sys.wait(1000);
			do Battle.addTimer(favorite.getMax()/favorite.getHP());
			do Sprite.drawCursor(x, 150+(x*16), 210+(y*11), false);
			let x = Battle.randInt(2);
			let y = Battle.randInt(2);
			do Sprite.drawCursor(x, 150+(x*16), 210+(y*11), true);
			do Sys.wait(1000);
		}

		let final = moves[(2*x)+y];

		return final;
	}

	method void choosePokemon()
	{
		var int shamt, current, min, max, poke1;
		var char key;
		var String dia;
		var Array pokemon, stats;
		var String temp1, temp2;
		let shamt = 11;
		let current = 0;
		let min = 0;
		let max = 5;

		let pokemon = Constants.getPokemon();
				
		do Sprite.drawCursor(0, 482, 23, true);
		do Sprite.drawCursor(2, 482, 221, false);
		do Sprite.draw(64, 32, pokemon[current], false);

		let stats = Constants.getStats();
		let temp1 = stats[2*current];
		let temp2 = stats[(2*current)+1];
		do Sprite.drawDialog(temp1, temp2);


		if (real)
		{
			do Battle.waitKeyUp();
			let key = Battle.getKey();
			while (~(key = 128))
			{
				let key = Battle.getKey();
				do Battle.waitKeyUp();
				if (key = 133)
				{
					if (~(current = max))
					{
						do Sprite.drawCursor(0, 482, 23 + (current * shamt), false);
						let current = current + 1;
						do Sprite.drawCursor(0, 482, 23 + (current * shamt), true);
						let stats = Constants.getStats();
						let temp1 = stats[2*current];
						let temp2 = stats[(2*current)+1];
						do Sprite.drawDialog(temp1, temp2);
						do Sprite.draw(64, 32, pokemon[current], false);
					}
				}
				if (key = 131)
				{
					if (~(current = min))
					{
						do Sprite.drawCursor(0, 482, 23 + (current * shamt), false);
						let current = current - 1;
						do Sprite.drawCursor(0, 482, 23 + (current * shamt), true);
						let stats = Constants.getStats();
						let temp1 = stats[2*current];
						let temp2 = stats[(2*current)+1];
						do Sprite.drawDialog(temp1, temp2);
						do Sprite.draw(64, 32, pokemon[current], false);
					}
				}
			}
			let poke1 = current;
		}
		else
		{
			do Sys.wait(1000);
			do Sprite.drawCursor(0, 482, 23 + (current * shamt), false);
			let poke1 = Battle.randInt(6);
			let current = poke1;
			do Sprite.drawCursor(0, 482, 23 + (current * shamt), true);
			do Sprite.draw(64, 32, pokemon[current], false);
			let stats = Constants.getStats();
			let temp1 = stats[2*current];
			let temp2 = stats[(2*current)+1];
			do Sprite.drawDialog(temp1, temp2);
			do Sys.wait(1000);
		}

		do Sprite.drawCursor(0, 482, 23 + (current * shamt), false);

		do setPokemon(Constants.getAPokemon(poke1));
		return;
	}

}