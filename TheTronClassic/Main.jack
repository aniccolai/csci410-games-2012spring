//Brett Dixon
//The Tron Classic Game
//4-1-2012

class Main {
	//driver function
	function void main(){
		var int stop, winner, first;
		var char key;
		let stop = 0;
		let first = 0;
		do Main.drawBorder();
		do Main.startScreen();
		while (stop = 0){
			let key = Keyboard.keyPressed();
			if (first = 0){
				do Main.startGame();
				let first = 1;
			}
			if (key = 140){
				do Screen.clearScreen();
				let stop = 1;
			}
			if (key = 32){
				do Screen.clearScreen();
				let winner = Main.playGame();
				do Main.reStartGame(winner);
			}
		}
		return;
	}

	//draws a border around the screen
	function void drawBorder(){
		var int x;
		let x = 16384;
		while (x < 24576){
			do Memory.poke(x, 15);
			let x = x + 32;
		}
		let x = 16384;
		while (x < 16512){
			do Memory.poke(x, -1);
			let x = x + 1;
		}
		let x = 16543;
		while (x < 24576){
			do Memory.poke(x, -4096);
			let x = x + 32;
		}
		let x = 24448;
		while (x < 24576){
			do Memory.poke(x, -1);
			let x = x + 1;
		}
		return;
	}

	//draws the starting instructions on the screen
	function void startScreen(){
		var char key;
		do Output.moveCursor(4, 18);
		do Output.printString("Welcome to The Tron Classic");
		do Output.moveCursor(7, 24);
		do Output.printString("w");
		do Output.moveCursor(8, 6);
		do Output.printString("Player 1 Keys:  a   d");
		do Output.moveCursor(9, 24);
		do Output.printString("s");
		do Output.moveCursor(8, 36);
		do Output.printString("Player 2 Keys:");
		do Screen.drawLine(433, 75, 433, 85); //up arrow
		do Screen.drawLine(434, 75, 434, 85);
		do Screen.drawLine(433, 75, 428, 80);
		do Screen.drawLine(433, 74, 428, 79);
		do Screen.drawLine(434, 75, 439, 80);
		do Screen.drawLine(434, 74, 439, 79);
		do Screen.drawLine(433, 102, 433, 112); //down arrow
		do Screen.drawLine(434, 102, 434, 112);
		do Screen.drawLine(433, 112, 428, 107);
		do Screen.drawLine(433, 111, 428, 106);
		do Screen.drawLine(434, 112, 439, 107);
		do Screen.drawLine(434, 111, 439, 106);
		do Screen.drawLine(413, 93, 423, 93); //left arrow
		do Screen.drawLine(413, 94, 423, 94);
		do Screen.drawLine(413, 94, 418, 99);
		do Screen.drawLine(414, 94, 419, 99);
		do Screen.drawLine(413, 93, 418, 88);
		do Screen.drawLine(414, 93, 419, 88);
		do Screen.drawLine(444, 93, 454, 93); //right arrow
		do Screen.drawLine(444, 94, 454, 94);
		do Screen.drawLine(454, 94, 449, 99);
		do Screen.drawLine(453, 94, 448, 99);
		do Screen.drawLine(454, 93, 449, 88);
		do Screen.drawLine(453, 93, 448, 88);
		do Output.moveCursor(12, 6);
		do Output.printString("Press the 4 direction keys to move your bike around");
		do Output.moveCursor(13, 6);
		do Output.printString("the screen. Your bike will leave a trail of all the");
		do Output.moveCursor(14, 7);
		do Output.printString("previous points you have been. Be the last to not");
		do Output.moveCursor(15, 18);
		do Output.printString("hit a trail or wall to win");
		do Output.moveCursor(18, 13);
		do Output.printString("Press the space bar to start the game");
		while (true){ //waits for user input before returning
			let key = Keyboard.keyPressed();
			if (key = 32){
				do Screen.clearScreen();
				return;
			}
		}
		return;
	}

	//draws the last instructions before starting the game
	function void startGame(){
		do Screen.drawRectangle(128, 128, 131, 131);
		do Screen.drawRectangle(388, 128, 391, 131);
		do Output.moveCursor(3, 13);
		do Output.printString("Press the space bar to start the game");
		do Output.moveCursor(10, 12);
		do Output.printString("Player 1");
		do Output.moveCursor(10, 44);
		do Output.printString("Player 2");
		do Sys.wait(1000);
		return;
	}

	//draws the players, moves the players, and checks for conflicts
	function int playGame(){
		var int conflict, pl1, pl2;
		var char key, right, left, up, down, move1, move2;
		var Bike player1, player2;
		let player1 = Bike.new(128,128);
		let player2 = Bike.new(388,128);
		let right = 114;
		let left = 108;
		let up = 117;
		let down = 100;
		let move1 = right;
		let move2 = left;
		let pl1 = 0;
		let pl2 = 0;
		do Screen.drawRectangle(player1.getX(),player1.getY(),(player1.getX()+3),(player1.getY()+3));
		do Screen.drawRectangle(player2.getX(),player2.getY(),(player2.getX()+3),(player2.getY()+3));
		while (true){ //check for user input
			let key = Keyboard.keyPressed();
			if (key = 130){ //left arrow
				let move2 = left;
			}
			if (key = 131){ //up arrow
				let move2 = up;
			}
			if (key = 132){ //right arrow
				let move2 = right;
			}
			if (key = 133){ //down arrow
				let move2 = down;
			}
			if (key = 65){ //keyboard left
				let move1 = left;
			}
			if (key = 87){ //keyboard up
				let move1 = up;
			}
			if (key = 68){ //keyboard right
				let move1 = right;
			}
			if (key = 83){ //keyboard down
				let move1 = down;
			}
			if (move1 = left){ //check for a conflict and then move player 1 left 1 square
				let conflict = Conflicts.aConflict(player1.getMem(),player1.getX(),left);
				if (conflict = -1){ //if conflict
					let pl1 = -1;
				}
				else{ //move if no conflict
					do player1.setX((player1.getX() - 4));
					do Screen.drawRectangle(player1.getX(),player1.getY(),(player1.getX()+3),(player1.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}
			else{ if (move1 = up){ //check for a conflict and then move player 1 up 1 square
				let conflict = Conflicts.aConflict(player1.getMem(),player1.getX(),up);
				if (conflict = -1){ //if conflict
					let pl1 = -1;
				}
				else{ //move if no conflict
					do player1.setY((player1.getY() - 4));
					do Screen.drawRectangle(player1.getX(),player1.getY(),(player1.getX()+3),(player1.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}
			else{ if (move1 = right){ //check for a conflict and then move player 1 right 1 square
				let conflict = Conflicts.aConflict(player1.getMem(),player1.getX(),right);
				if (conflict = -1){ //if conflict
					let pl1 = -1;
				}
				else{ //move if no conflict
					do player1.setX((player1.getX() + 4));
					do Screen.drawRectangle(player1.getX(),player1.getY(),(player1.getX()+3),(player1.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}
			else{ if (move1 = down){ //check for a conflict and then move player 1 down 1 square
				let conflict = Conflicts.aConflict(player1.getMem(),player1.getX(),down);
				if (conflict = -1){ //if conflict
					let pl1 = -1;
				}
				else{ //move if no conflict
					do player1.setY((player1.getY() + 4));
					do Screen.drawRectangle(player1.getX(),player1.getY(),(player1.getX()+3),(player1.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}}}}
			if (move2 = left){ //check for a conflict and then move player 2 left 1 square
				let conflict = Conflicts.aConflict(player2.getMem(),player2.getX(),left);
				if (conflict = -1){ //if conflict
					let pl2 = -1;
				}
				else{ //move if no conflict
					do player2.setX((player2.getX() - 4));
					do Screen.drawRectangle(player2.getX(),player2.getY(),(player2.getX()+3),(player2.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}
			else{ if (move2 = up){ //check for a conflict and then move player 2 up 1 square
				let conflict = Conflicts.aConflict(player2.getMem(),player2.getX(),up);
				if (conflict = -1){ //if conflict
					let pl2 = -1;
				}
				else{ //move if no conflict
					do player2.setY((player2.getY() - 4));
					do Screen.drawRectangle(player2.getX(),player2.getY(),(player2.getX()+3),(player2.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}
			else{ if (move2 = right){ //check for a conflict and then move player 2 right 1 square
				let conflict = Conflicts.aConflict(player2.getMem(),player2.getX(),right);
				if (conflict = -1){ //if conflict
					let pl2 = -1;
				}
				else{ //move if no conflict
					do player2.setX((player2.getX() + 4));
					do Screen.drawRectangle(player2.getX(),player2.getY(),(player2.getX()+3),(player2.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}
			else{ if (move2 = down){ //check for a conflict and then move player 2 down 1 square
				let conflict = Conflicts.aConflict(player2.getMem(),player2.getX(),down);
				if (conflict = -1){ //if conflict
					let pl2 = -1;
				}
				else{ //move if no conflict
					do player2.setY((player2.getY() + 4));
					do Screen.drawRectangle(player2.getX(),player2.getY(),(player2.getX()+3),(player2.getY()+3));
					do Main.resetMemory(player1, player2);
				}
			}}}}  
			if (pl1 = -1){
				if (pl2 = -1){ //if players hit each other at the same time
					return 3;
				}
				else{ //if player 1 hits player 2
					return 2;
				}
			}
			else{ if (pl2 = -1){ //if player2 hits player 1
				return 1;
			}}
			do Sys.wait(100);
		}
		return 0;
	}

	//prints the winner to the screen and instructions on how to proceed
	function void reStartGame(int winner){
		if (winner = 3){
			do Output.moveCursor(3, 22);
			do Output.printString("Neither Player Wins");
		}
		else{
			do Output.moveCursor(3, 22);
			do Output.printString("Player ");
			do Output.printInt(winner);
			do Output.printString(" Wins!!!!!!!");
		}
		do Output.moveCursor(19, 13);
		do Output.printString("Press the space bar to start a new game");
		do Output.moveCursor(20, 17);
		do Output.printString("Press ESC to end the program");
		return;
	}

	//updates the memory cell for each player after a move
	function void resetMemory(Bike player1, Bike player2){
		do player1.setMem();
		do player2.setMem();
		return;
	}
}