class Main {
	function void main() {
			// Declares variables. 
		var Player p1;
		var Player p2;
		var int attackerSize;
		var int evaderSize;
		var int p1Size;
		var int p2Size;
		var ScoreBoard score;
		var EndScreen end;
		var StartScreen start;
		var int count;
		var int timer;
		var boolean exit;
		var boolean enter;
		var boolean collision;
		var char key;
		var int lastMove1;
		var int lastMove2;

		//Initializing variables
		let lastMove1 = 0;
		let lastMove2 = 0;
		let count = 0;
		let exit = false;
		let enter = false;
		let collision = false;
		let p2 = Player.new(440, 120);
		let p1 = Player.new(50,120);
		let score = ScoreBoard.new();
		let end = EndScreen.new();
		let start = StartScreen.new();
 
		let attackerSize = 5;
		let evaderSize = 5;
		
		let p1Size = attackerSize;
		let p2Size = evaderSize;
		do p1.setAssassin(false);
		do start.drawStartScreen();
		do score.drawBoard();
		do p1.setSize(start.getDifficulty());
		do p2.setSize(start.getDifficulty());
		
		// This runs until one of the players wins. This is checked after each round. 
		while((p1.getScore() < 5) & (p2.getScore() < 5)){
			
			if(p1.isAssassin()){ 	
				do p1.setAssassin(false);
				do score.drawAssassinIcon(2);
				do score.eraseIcon(1);
				//let p1Size = evaderSize;
				//let p2Size = attackerSize;
				//do p1.setSize(5);
				//do p2.setSize(10);
			}
			else{
				do p1.setAssassin(true);
				do score.drawAssassinIcon(1);
				do score.eraseIcon(2);
				//let p2Size = evaderSize;
				//let p1Size = attackerSize;
				//do p2.setSize(5);
				//do p1.setSize(10);
			}
			do p1.drawPlayer(false);
			do p2.drawPlayer(false);
			do p1.setSize(start.getDifficulty());
			do p2.setSize(start.getDifficulty());
			do p1.resetPosition();
			do p2.resetPosition();
			//do p1.resetPosition(p1Size);
			//do p2.resetPosition(p2Size);
			let lastMove1 = 0;
			let lastMove2 = 0;
			let collision = false;
			let exit = false;
			let timer = 15;
			let count = 0;
			do score.updateTimer(timer);
			
			do Output.moveCursor(10,25);
			do Output.printString("Player ");
			if(p1.isAssassin()){
				do Output.printInt(1);
			}else{
				do Output.printInt(2);
			}
			do Output.printString(" is it!");
			do Output.moveCursor(11,22);
			do Output.printString("`enter' begins round");
			while(~(enter)){
				if(Keyboard.keyPressed() = 128){
					let enter = true;
					do Output.moveCursor(10,25);
					do Output.printString("               ");
					do Output.moveCursor(11,22);
					do Output.printString("                    ");
				}
			}
			let enter = false;
			// This is for the in-round game player. If there is a collision or time runs out, break from loop. 
			while(~(exit)){
				
				let key = Keyboard.keyPressed();
				let count = count + 1;
				if(count > 5000){
					let timer = timer - 1;
					let count = 0;
					do score.updateTimer(timer);
				}
				
				if(lastMove1 = 0){
					let count = count - 1;
				}
				if(lastMove2 = 0){
					let count = count - 1;
				}
				
				if(timer < 10){
					do Output.moveCursor(0,31);
				}
				if(key = 65){ 					//left
					let lastMove1 = 3;
					let count = count + 20;
				}
				if(key = 87){ 					// up
					let lastMove1 = 1;
					let count = count + 20;
				}
				if(key = 68){ 					// right
					let lastMove1 = 4;
					let count = count + 20;
				}
				if(key = 83){ 					// down
					let lastMove1 = 2;
					let count = count + 20;
				
				}
				//PLAYER 2 CONTROLS
				if(key = 130){ 					//left
					let lastMove2 = 3;
					let count = count + 20;
				}
				if(key = 131){ 					// up
					let lastMove2 = 1;
					let count = count + 20;
				}
				if(key = 132){ 					// right
					let lastMove2 = 4;
					let count = count + 20;
				}
				if(key = 133){ 					// down
					let lastMove2 = 2;
					let count = count + 20;
				}
				if(key = 0){
					if( (~(lastMove1 = 0))|(~(lastMove2 = 0))){
						if(~(p1.onBorder())){
							let count = count + 20;
						}
						if(~(p2.onBorder())){
							let count = count + 20;
						}
					}
					else{
						let count = count + 2;
					}
					
				}
				if(p2.checkCollision(p1)|p1.checkCollision(p2)){
					let collision = true;
					let exit = true;
				}
				do p1.refreshPosition(lastMove1);
				if(p2.checkCollision(p1)|p1.checkCollision(p2)){
						let collision = true;
						let exit = true;
						
				}
				do p2.refreshPosition(lastMove2);
				if(p2.checkCollision(p1)|p1.checkCollision(p2)){
					let collision = true;
					let exit = true;
				}
				if(collision){
					if(p1.isAssassin()){
						do p1.scoreInc();
						do score.updateScore(p1.getScore(),1);
						do p2.disintegrate();
						do p1.drawPlayer(false);
						do p2.drawPlayer(false);
						do p1.resetPosition();
						do p2.resetPosition();
					}else{
						do p2.scoreInc();
						do score.updateScore(p2.getScore(),2);
						do p1.disintegrate();
						do p1.drawPlayer(false);
						do p2.drawPlayer(false);
						do p2.resetPosition();
						do p1.resetPosition();
					}
				}
				if((key = 67) & (~(p1.onBorder()) )){
					if((p1.getX()<445) & (p1.getY() < 485)){ 
						do p1.drawPlayer(false);
						do p1.setSize(60);
						do p1.drawPlayer(true);
					}
				}
				if(key = 82){
					do p1.drawPlayer(false);
					do p1.setSize(1);
					do p1.drawPlayer(true);
				}
				if(key = 48){
					do p2.drawPlayer(false);
					do p2.setSize(1);
					do p2.drawPlayer(true);
				}
				if((key = 49) & (~(p2.onBorder()))){
					//451,495
					if((p2.getX()<445) & (p2.getY() < 485)){ 
						do p2.drawPlayer(false);
						do p2.setSize(60);
						do p2.drawPlayer(true);
					}
					
				}
				if(key = 140){					//exit with 'ESC'
					let exit = true;
				}
				if(timer = 0){
					
					do p1.resetPosition();
					do p2.resetPosition();
					let exit = true;
				}
			}
		}

		// used to set who won the game. 
		if(p1.getScore() = 5){
			do end.drawEndScreen(1);	
		}else{
			do end.drawEndScreen(2);
		}
		return;
	}
}