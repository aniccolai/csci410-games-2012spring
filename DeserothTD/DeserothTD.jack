//This file contains all the logic associated with the game.

class DeserothTD {

	field char key;
	field Array towers;
	field Array creeps;
	field Cursor c;
	field int nextSlot;
	field InGameDisplayPanel panel;
	field Tower currentTower;
	field boolean activeWave;
	field int numberOfCreeps;
	field int currentCreep;
	field int waveHealth;
	field int CREEPDELAY;
	field int creepDelayCounter;
	field int SHOOTDELAY;
	field int shootDelayCounter;
	field int creepsmade;

	constructor DeserothTD new()
	{
		let towers = Array.new(60);
		let nextSlot = 0;
		let activeWave = false;
		let CREEPDELAY = 2500;
		let SHOOTDELAY = 1000;
		let shootDelayCounter = 0;
		let creepDelayCounter = 0;
		return this;
	}
	method void dispose()
	{
		do towers.dispose();
		do Memory.deAlloc(this);
		return;
	}
	
	method void sendWave(int number)
	{
		var int counter;
		var int health;
	
		let health = panel.getLevel();
		let health = health * health;
		let activeWave = true;
		let numberOfCreeps = number;
		let currentCreep = 0;
		let waveHealth = health;
		
		let counter = 0;
		let creeps = Array.new(number);
		let creepsmade = 0;
		
		do panel.increaseLevel();
		let creepDelayCounter = 2500;
		return;
	}
	
	method void drawWave()
	{
		var int counter;
		var Creep tempCreep;


		//do Screen.drawRectangle(x,y, x+width, y+height);
		
		while (counter < currentCreep)
		{
			let tempCreep = creeps[counter];
			if( tempCreep.getAlive() )
			{
				do tempCreep.draw();
			}
			let counter = counter + 1;
		}
		return;
	}
	
	method void updateWave()
	{
		var int counter;
		var Creep tempCreep;
		
		if(creepDelayCounter = CREEPDELAY)
		{
			if( currentCreep < numberOfCreeps)
			{
				let creeps[currentCreep] = Creep.new(waveHealth);
				let currentCreep = currentCreep +1;
			}
			let creepDelayCounter = 0;
		}
		let creepDelayCounter = creepDelayCounter + 1;
		
		let activeWave = false;
		while (counter < currentCreep)
		{
			let tempCreep = creeps[counter];
			if(tempCreep.getAlive() )
			{
				if( tempCreep.move())
				{
					do panel.loseLife();
					do printGameScreen();
				}
				let activeWave = true;
			}
			if (currentCreep < 10)
			{
				let activeWave = true;
			}
			let counter = counter + 1;
		}
		if (counter < currentCreep)
		{
			let activeWave = true;
		}
		if (~activeWave)
		{
			do printGameScreen();
			do disposeWave();
		}

		return;
	}
	
	method void disposeWave()
	{
		do creeps.dispose();
		let activeWave = false;
		return;
	}
	
	method void towerShoot()
	{
		var Tower tempTower;
		var Creep tempCreep;
		var int index;
		
		if (shootDelayCounter = SHOOTDELAY)
		{
			let shootDelayCounter = 0;
			let index = 0;
			while ((index < currentCreep))
			{
				let tempCreep = creeps[index];
				if (tempCreep.getAlive() & ~(tempCreep = null))
				{
					let index = currentCreep;
				}
				let index = index + 1;
			}
			if (~(tempCreep = null))
			{
				let index = 0;
				while ((index < nextSlot))
				{
					let tempTower = towers[index];
					do tempTower.setTarget(tempCreep);
					if (tempTower.shootTarget())
					{
						do panel.increaseScore();
						do panel.increaseGold();
						//do printGameScreen();
					}
					let index = index + 1;
				}
			}
		}
		
		if ((shootDelayCounter * 2) = SHOOTDELAY)
		{
			do Screen.clearScreen();
			do printGameScreen();
		}
		let shootDelayCounter = shootDelayCounter + 1;
		return;
	}
	
	method void run()
	{
		var boolean exit;
		var boolean drawn;
		var boolean keypress;
		var int index;
		var Tower tempTower;
		let keypress = false;
		let drawn = false;
		let exit = false;
		let c = Cursor.new();
		let panel = InGameDisplayPanel.new();
		
		while (~exit)
		{
			let key = Keyboard.keyPressed();
			if ((~(drawn)))
			{
				let index = 0;
				do printGameScreen();
				let drawn = true;
			}
			if(activeWave)
			{
				do towerShoot();
				do updateWave();
				do drawWave();
			}
			if ((key = 130) & (keypress))
			{
				do c.decX();
				let drawn = false;
				let keypress = false;
				do Screen.clearScreen();
			}
			if ((key = 131) & (keypress))
			{
				do c.decY();
				let drawn = false;
				let keypress = false;
				do Screen.clearScreen();
			}
			if ((key = 132) & (keypress))
			{
				do c.incX();
				let drawn = false;
				let keypress = false;
				do Screen.clearScreen();
			}
			if ((key = 133) & (keypress))
			{
				do c.incY();
				let drawn = false;
				let keypress = false;
				do Screen.clearScreen();
			}
			if ((key = 66) & (keypress))
			{
				let keypress = false;
				let drawn = false;
				if (~(10 > panel.getGold()) & (currentTower = null))
				{
					let towers[nextSlot] = Tower.new(c.getX(), c.getY());
					let tempTower = towers[nextSlot];
					do panel.buyTower(tempTower.getCost());
					let nextSlot = nextSlot + 1;
				}
			}
			if ((key = 85) & (keypress))
			{
				let keypress = false;
				let drawn = false;
				let index = 0;
				while ((index < nextSlot))
				{
					let tempTower = towers[index];
					if ((tempTower.getX() = c.getX()) & (tempTower.getY() = c.getY()))
					{
						if (~(tempTower.getCost() > panel.getGold()))
						{
							do panel.buyTower(tempTower.getCost());
							do tempTower.upgradeTower();
							let towers[index] = tempTower;
						}
						let index = nextSlot;
					}
					let index = index + 1;
				}
			}
			if ((key = 83) & (keypress) & (~activeWave))
			{
				do sendWave(10);
			}
			if (key = 81 | ~(panel.getLives() > 0))
			{
				let exit = true;
			}
			if (key = 0)
			{
				let keypress = true;
			}
		}
		return;
	}
	
	method void drawGrid()
	{
		var int x;
		var int y;
		let x = 0;
		let y = 0;
		do Screen.setColor(true);
		while (~(x=352))
		{
			
			do Screen.drawLine(x,0,x,96);
			do Screen.drawLine(x,128,x,224);
			let x = x+32;
		}
		while (~(y=256))
		{
			do Screen.drawLine(0,y,320,y);
			let y = y+32;
		}
		return;
	}
	
	method void printGameScreen()
	{
		var Tower tempTower;
		var int index;			
		let index = 0;
		let currentTower = null;
		
		do drawGrid();
		
		while ((index < nextSlot))
		{
			let tempTower = towers[index];
			if ((tempTower.getX() = c.getX()) & (tempTower.getY() = c.getY()))
			{
				let currentTower = towers[index];
				let index = nextSlot;
			}
			let index = index + 1;
		}
		let index = 0;
		while ((index < nextSlot))
		{
			let tempTower = towers[index];
			do tempTower.draw();
			let index = index + 1;
		}
		if (currentTower = null)
		{
			do panel.draw(0, 10, 0, 0);
		}
		else
		{
			do panel.draw(currentTower.getLevel(), currentTower.getCost(), currentTower.getKills(), currentTower.getAttack());
		}

		do c.draw();
		return;
	}
}