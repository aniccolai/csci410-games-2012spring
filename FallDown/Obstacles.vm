function Obstacles.new 0
push constant 1
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push pointer 0
return
function Obstacles.dispose 2
push argument 0
pop pointer 0
push this 0
pop local 0
push this 0
pop local 1
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
call Obstacle.getNext 1
pop local 1
push local 0
call Obstacle.dispose 1
pop temp 0
push local 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Obstacles.add 1
push argument 0
pop pointer 0
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
pop this 0
goto IF_END0
label IF_FALSE0
push this 0
pop local 0
label WHILE_EXP0
push local 0
call Obstacle.getNext 1
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
call Obstacle.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push local 0
push argument 1
call Obstacle.setNext 2
pop temp 0
label IF_END0
push constant 0
return
function Obstacles.remove 1
push argument 0
pop pointer 0
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
return
goto IF_END0
label IF_FALSE0
push this 0
pop local 0
push this 0
call Obstacle.getNext 1
pop this 0
push local 0
return
label IF_END0
function Obstacles.draw 1
push argument 0
pop pointer 0
push this 0
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
push argument 1
call Obstacle.draw 2
pop temp 0
push local 0
call Obstacle.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Obstacles.moveUp 2
push argument 0
pop pointer 0
push pointer 0
push constant 0
call Obstacles.draw 2
pop temp 0
push this 0
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
call Obstacle.moveUp 1
pop temp 0
push local 0
call Obstacle.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
pop local 1
label WHILE_EXP1
push local 1
not
if-goto WHILE_END1
push this 0
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
pop local 1
goto IF_END0
label IF_FALSE0
push this 0
call Obstacle.getY2 1
push constant 0
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push pointer 0
call Obstacles.remove 1
pop temp 0
goto IF_END1
label IF_FALSE1
push constant 0
pop local 1
label IF_END1
label IF_END0
goto WHILE_EXP1
label WHILE_END1
push pointer 0
push constant 0
not
call Obstacles.draw 2
pop temp 0
push constant 0
return
function Obstacles.getHead 0
push argument 0
pop pointer 0
push this 0
return
