function Ball.new 0
push constant 3
call Memory.alloc 1
pop pointer 0
push argument 0
pop this 0
push argument 1
pop this 1
push argument 2
pop this 2
push pointer 0
push constant 0
not
call Ball.draw 2
pop temp 0
push pointer 0
return
function Ball.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Ball.draw 0
push argument 0
pop pointer 0
push argument 1
call Screen.setColor 1
pop temp 0
push this 0
push this 1
push this 2
call Screen.drawCircle 3
pop temp 0
push constant 0
return
function Ball.canMoveUp 0
push argument 0
pop pointer 0
push this 1
push this 2
sub
push constant 4
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
not
return
goto IF_END0
label IF_FALSE0
push constant 0
return
label IF_END0
function Ball.moveUp 0
push argument 0
pop pointer 0
push this 1
push constant 5
sub
pop this 1
push constant 0
return
function Ball.canMoveDown 2
push argument 0
pop pointer 0
push this 1
push this 2
add
push constant 5
add
pop local 1
push this 1
push this 2
add
push constant 251
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
call Obstacles.getHead 1
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push this 0
push this 2
add
push local 0
call Obstacle.getX1 1
push constant 1
sub
gt
push this 0
push this 2
sub
push local 0
call Obstacle.getX2 1
push constant 1
add
lt
and
push local 1
push local 0
call Obstacle.getY1 1
gt
and
push local 1
push local 0
call Obstacle.getY2 1
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 0
call Obstacle.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
goto IF_END0
label IF_FALSE0
push constant 0
return
label IF_END0
function Ball.moveDown 0
push argument 0
pop pointer 0
push this 1
push constant 5
add
pop this 1
push constant 0
return
function Ball.canMoveLeft 2
push argument 0
pop pointer 0
push this 0
push this 2
sub
push constant 4
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
call Obstacles.getHead 1
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push this 0
push this 2
sub
push local 0
call Obstacle.getX2 1
sub
pop local 1
push local 1
push constant 5
lt
push local 1
push constant 0
gt
and
push this 1
push this 2
add
push local 0
call Obstacle.getY1 1
gt
and
push this 1
push this 2
sub
push local 0
call Obstacle.getY2 1
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 0
call Obstacle.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
goto IF_END0
label IF_FALSE0
push constant 0
return
label IF_END0
function Ball.moveLeft 0
push argument 0
pop pointer 0
push this 0
push constant 5
sub
pop this 0
push constant 0
return
function Ball.canMoveRight 2
push argument 0
pop pointer 0
push this 0
push this 2
add
push constant 507
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push argument 1
call Obstacles.getHead 1
pop local 0
label WHILE_EXP0
push local 0
push constant 0
eq
not
not
if-goto WHILE_END0
push local 0
call Obstacle.getX1 1
push this 0
push this 2
add
sub
pop local 1
push local 1
push constant 5
lt
push local 1
push constant 0
gt
and
push this 1
push this 2
add
push local 0
call Obstacle.getY1 1
gt
and
push this 1
push this 2
sub
push local 0
call Obstacle.getY2 1
lt
and
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
return
label IF_FALSE1
push local 0
call Obstacle.getNext 1
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
not
return
goto IF_END0
label IF_FALSE0
push constant 0
return
label IF_END0
function Ball.moveRight 0
push argument 0
pop pointer 0
push this 0
push constant 5
add
pop this 0
push constant 0
return
function Ball.getTopEdge 0
push argument 0
pop pointer 0
push this 1
push this 2
sub
return
