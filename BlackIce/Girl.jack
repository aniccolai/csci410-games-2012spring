
class Girl {
	
        field int x, y;
	
    /** Constructs a new Girl with a given location and size. */
    constructor Girl new(int Ax, int Ay) {
        let x = Ax * 16;
        let y = Ay * 16;
        return this;
    }

    method void set(int Ax, int Ay){
        let x = Ax*16;
        let y = Ay*16;
        return;
    }

    /** Draws the Girl on the screen */
    method void drawUp() {
        var int sstart, sX, sY, i, j;
        let sstart =  16384;
        let sY = y;
        let sX = x/16;
        let i = sstart + sX + (sY*32);
        do Memory.poke(i,384);
        do Memory.poke(i + 32,1632);
        do Memory.poke(i + 64,3120);
        do Memory.poke(i + 96,5160);

        do Memory.poke(i + 128,9252);
        do Memory.poke(i + 160,9252);
        do Memory.poke(i + 192,9252);
        do Memory.poke(i + 224,8772);

        do Memory.poke(i + 256,4488);
        do Memory.poke(i + 288,6168);
        do Memory.poke(i + 320,12276);
        do Memory.poke(i + 352,11316);

        do Memory.poke(i + 384,6744);
        do Memory.poke(i + 416,2064);
        do Memory.poke(i + 448,4080);
        do Memory.poke(i + 480,1632);
        return;
    }
    method void drawDown() {
        var int sstart, sX, sY, i, j;
        let sstart =  16384;
        let sY = y;
        let sX = x/16;
        let i = sstart + sX + (sY*32);
        do Memory.poke(i,896);
        do Memory.poke(i + 32,1888);
        do Memory.poke(i + 64,2192);
        do Memory.poke(i + 96,4232);

        do Memory.poke(i + 128,8772);
        do Memory.poke(i + 160,9636);
        do Memory.poke(i + 192,10260);
        do Memory.poke(i + 224,4680);

        do Memory.poke(i + 256,4680);
        do Memory.poke(i + 288,6168);
        do Memory.poke(i + 320,10212);
        do Memory.poke(i + 352,9252);

        do Memory.poke(i + 384,6744);
        do Memory.poke(i + 416,2064);
        do Memory.poke(i + 448,4080);
        do Memory.poke(i + 480,1632);
        return;
    }
    method void drawLeft() {
        var int sstart, sX, sY, i, j;
        let sstart =  16384;
        let sY = y;
        let sX = x/16;
        let i = sstart + sX + (sY*32);
        do Memory.poke(i,7104);
        do Memory.poke(i + 32,9264);
        do Memory.poke(i + 64,18504);
        do Memory.poke(i + 96,20612);

        do Memory.poke(i + 128,20764);
        do Memory.poke(i + 160,20776);
        do Memory.poke(i + 192,20840);
        do Memory.poke(i + 224,21416);

        do Memory.poke(i + 256,22024);
        do Memory.poke(i + 288,11280);
        do Memory.poke(i + 320,1440);
        do Memory.poke(i + 352,1632);

        do Memory.poke(i + 384,2656);
        do Memory.poke(i + 416,2464);
        do Memory.poke(i + 448,2016);
        do Memory.poke(i + 480,1008);
        return;
    }
    method void drawRight() {
        var int sstart, sX, sY, i, j;
        let sstart =  16384;
        let sY = y;
        let sX = x/16;
        let i = sstart + sX + (sY*32);
        do Memory.poke(i,984);
        do Memory.poke(i + 32,3108);
        do Memory.poke(i + 64,4626);
        do Memory.poke(i + 96,8458);

        do Memory.poke(i + 128,14474);
        do Memory.poke(i + 160,5258);
        do Memory.poke(i + 192,5770);
        do Memory.poke(i + 224,5578);

        do Memory.poke(i + 256,4202);
        do Memory.poke(i + 288,2100);
        do Memory.poke(i + 320,1440);
        do Memory.poke(i + 352,1632);

        do Memory.poke(i + 384,1616);
        do Memory.poke(i + 416,1424);
        do Memory.poke(i + 448,2016);
        do Memory.poke(i + 480,4032);
        return;
    }
}
/* Girl Front bit map
0000 0011 1000 0000     896
0000 0111 0110 0000     1888
0000 1000 1001 0000     2192
0001 0000 1000 1000     4232

0010 0010 0100 0100     8772
0010 0101 1010 0100     9636
0010 1000 0001 0100     10260
0001 0010 0100 1000     4680

0001 0010 0100 1000     4680
0001 1000 0001 1000     6168
0010 0111 1110 0100     10212
0010 0100 0010 0100     9252

0001 1010 0101 1000     6744
0000 1000 0001 0000     2064
0000 1111 1111 0000     4080
0000 0110 0110 0000     1632
*/
/* Girl Back bit map
0000 0001 1000 0000     384
0000 0110 0110 0000     1632
0000 1100 0011 0000     3120
0001 0100 0010 1000     5160

0010 0100 0010 0100     9252
0010 0100 0010 0100     9252
0010 0100 0010 0100     9252
0010 0010 0100 0100     8772

0001 0001 1000 1000     4488
0001 1000 0001 1000     6168
0010 1111 1111 0100     12276
0010 1100 0011 0100     11316

0001 1010 0101 1000     6744
0000 1000 0001 0000     2064
0000 1111 1111 0000     4080
0000 0110 0110 0000     1632
*/
/* Girl Left bit map
0001 1011 1100 0000     7104
0010 0100 0011 0000     9264
0100 1000 0100 1000     18504
0101 0000 1000 0100     20612

0101 0001 0001 1100     20764
0101 0001 0010 1000     20776
0101 0001 0110 1000     20840
0101 0011 1010 1000     21416

0101 0110 0000 1000     22024
0010 1100 0001 0000     11280
0000 0101 1010 0000     1440
0000 0110 0110 0000     1632

0000 1010 0110 0000     2656
0000 1001 1010 0000     2464
0000 0111 1110 0000     2016
0000 0011 1111 0000     1008
*/
/* Girl Right bit map
0000 0011 1101 1000     984
0000 1100 0010 0100     3108
0001 0010 0001 0010     4626
0010 0001 0000 1010     8458

0011 1000 1000 1010     14474
0001 0100 1000 1010     5258
0001 0110 1000 1010     5770
0001 0101 1100 1010     5578

0001 0000 0110 1010     4202
0000 1000 0011 0100     2100
0000 0101 1010 0000     1440
0000 0110 0110 0000     1632

0000 0110 0101 0000     1616
0000 0101 1001 0000     1424
0000 0111 1110 0000     2016
0000 1111 1100 0000     4032
*/