class Asteroid {
  static int SPEED;
  field int x1, x2, y1, y2;
  field boolean stopMoving;

  constructor Asteroid new (int x, int y) {
    let x1 = x;
    let x2 = x + 15;
    let y1 = y;
    let y2 = y + 15;
    let SPEED = 10;
    let stopMoving = false;
    do update();
    return this;
  }
  
  // TODO 
  method boolean isHit(Bullet b) {
    var int bX, bY;
    let bX = b.getX();
    let bY = b.getY();
    
    //if(~(bX < x1) && ~(bX > x2) && ~(bY < y) && ~(bY > (y + height))){
    if((~(bX < x1)) & (~(bX > x2)) & (~(bY < y1)) & (~(bY > y2))) {
      return true;
    } else {
      return false;
    }
  }
  
  method boolean passedBorder() {
    if(~(y1 < 225)) {
      return true;
    } else {
      return false;
    }
  }

  // Update the coordinates
  method void move() {
    if(~(stopMoving)) {
      let y1 = y1 + SPEED;
      let y2 = y2 + SPEED;
      do update();
    }
    return;
  }

  // TODO
  method void update() { 
    do Screen.drawRectangle(x1, y1, x2, y2);
    do Screen.setColor(false);
    do Screen.drawRectangle(x1, y1 - 15, x2, y2 - 15);
    do Screen.setColor(true);
    return;
  }
  
  method int getX1() {
    return x1;
  }
  
  method int getX2() {
    return x2;
  }
  
  method int getY1() {
    return y1;
  }
  
  method int getY2() {
    return y2;
  }

  method void destroy() {
    do Screen.setColor(false);
    do Screen.drawRectangle(x1, y1, x2, y2);
    do Screen.setColor(true);
    let stopMoving = true;
    return;
  }

  method boolean isDestroyed() {
    return stopMoving;
  }
  
  method void deAlloc() {
    do Memory.deAlloc(this);
    return;
  }
}