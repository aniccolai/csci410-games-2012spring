class BulletArray {
	field Array bullets;
	field Bullet tempBullet;
	field int count;
	
	constructor BulletArray new() {
		let bullets = Array.new(100);
		let count = 0;
		return this;
	}
	
	method void addBullet(int x, int y){
		let tempBullet = Bullet.new(x,y);
		let bullets[count] = tempBullet;
		let count = count + 1;
		return;
	}
	
	method void updateAll(){
		var int i;
		let i = 0;
		while(i<count){
			let tempBullet = bullets[i];
			do tempBullet.update();
			let bullets[i] = tempBullet;
			let i = i + 1;
		}
		return;
	}
	
	method boolean passedBoundary(){
		var int i, flag;
		var boolean tempFlag;
		let i = 0;
		let flag = 0;
		while(i<count){
			//var Asteroid tempRoid;
			let tempBullet = bullets[i];
			let tempFlag = tempBullet.passedBorder();
			if(tempFlag){
				let flag = flag + 1;
			}
			let i = i + 1;
		}
		if(flag>0){
			return true;
		} else {
			return false;
		}
	}
	
	method void arrangeBulletArray() {
    var int i, j;
    let i = 0;
    while(i < count) {
      let tempBullet = bullets[i];

      if(tempBullet = null) {
        let j = i;
        while(j < (count - 1)) {
          let bullets[j] = bullets[j + 1];
          let j = j + 1;
        }

        let count = count - 1;
      }

      let i = i + 1;
    }

    return;
  }

	method int getBulletCount() {
		return count;
	}
	
	method Bullet getBullet(int index){
		return bullets[index];
	}
	
	method void destroyBullet(int index){
		let tempBullet = bullets[index];
		do tempBullet.destroy();
		let bullets[index] = null;
		//do arrangeBulletArray();
		return;
	}
	
	method void destroy() {
    do Memory.deAlloc(this);
    return;
  }
}