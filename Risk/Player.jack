class Player {

	field Array territories; //Will store true or false
	field int number, territoriesOwned;
	field RAND generator;
	
	constructor Player new(int num){
		var int totalTerr;
		var int i;
		let totalTerr = Constants.numTerritories();
		let territories = Array.new(totalTerr);
		let number = num;
		let territoriesOwned = 0;
		let i = 0;
		//Initialize to not owning any territories
		while(i < totalTerr) {
			let territories[i] = false;
			let i = i + 1;
		}
		let generator = RAND.new(num);
		
		return this;
	}
	
	//Handles any attacking done during a player's turn
	method void playTurn(Player p, Board b) {
		var String from, to, qTurn, aFrom, aTo, aOrR, endString, playerS, pTurn;
		var char a, f, t, q, end, turn;
		var char attacking;
		var boolean stop;
		var Territory temp;
		let a = 65; //'A'
		let q = 81; //'Q'
		let qTurn = "Press 'Q' to end turn, any other key to attack. ";
		let aFrom = "Attack from: ";
		let aTo = "Attack: ";
		let aOrR = "Press A to attack, any other key to retreat. ";
		let playerS = "Player ";
		let pTurn = "'s Turn.";
		
		do Output.moveCursor(18, 0);
		do Output.printString(playerS);
		do Output.printInt(number);
		do Output.printString(pTurn);
		do Output.println();
		let endString = Keyboard.readLine(qTurn);
		let end = endString.charAt(0);
		// While not attacking (Q for retreat)
		while (~(end = q)) {
			let from = Keyboard.readLine(aFrom);
			let to = Keyboard.readLine(aTo);
			let f = from.charAt(0);
			let t = to.charAt(0);
			let f = f - a;
			let t = t - a;
			// Check to make sure attacker belongs to player
			let temp = b.getTerritory(f);
			if (~(temp.getPlayer() = this)) {
				do printMessage(b, "Not allowed to attack from opposing player's territory!");
				return;
			}
			// Check to make sure attacker has more than 1 army to attack with
			if (temp.getArmies() < 2) {
				do printMessage(b, "Not allowed to attack with less than 2 armies!");
				return;
			}
			// TODO: Check attack neighbor
			// Attack Mode
			do Output.printString(aOrR);
			let attacking = Keyboard.readChar();
			while (attacking = a) {
				let stop = attack(b, p, f, t);
				if (stop) { let attacking = q; } //Break if done attacking
				else {
					do Output.moveCursor(19, 0);
					do Output.printString(aOrR);
					let attacking = Keyboard.readChar();
				}
			}
			do Output.moveCursor(19, 0);
			do Output.printString(qTurn);
			let end = Keyboard.readChar();
			do Output.println();
		}
		do qTurn.dispose();
		do aFrom.dispose();
		do aTo.dispose();
		do aOrR.dispose();
		do playerS.dispose();
		do pTurn.dispose();
		return;
	}
	
	//Calculates who wins and adjusts armies appropriately
	//Returns true if territory is won or attacker only has one army left
	//Returns false otherwise
	method boolean attack(Board b, Player p, int from, int to) {
		//Random number generator
		var int f, t, armiesLeft, winnerArmies;
		var Territory loser, winner;
		var String attackS, conquerS;
		let attackS = "Can't attack anymore!";
		let conquerS = "Successfullly conquered a territory!";
		let f = generator.nextRand();
		let t = generator.nextRand();
		//Update armies
		if (f > t) { //Defender wins
			let loser = b.getTerritory(from);
			do loser.addArmies(-1);
			let armiesLeft = loser.getArmies();
			if (armiesLeft = 1) { //Can't attack anymore
				do printMessage(b, attackS);
				do attackS.dispose();
				return true;
			}	
		}
		else { //Attacker wins
			let loser = b.getTerritory(to);
			do loser.addArmies(-1);
			// Check to see if territory was won
			let armiesLeft = loser.getArmies();
			if (armiesLeft = 0) {
				//Transfer territories
				do loser.setPlayer(this);
				do p.addTerritories(-1); //Less territories
				do addTerritories(1); //More territories
				do p.setTerritory(from, false);
				do setTerritory(to, true);
				//Move armies
				let winner = b.getTerritory(from);
				let winnerArmies = winner.getArmies();
				let winnerArmies = winnerArmies - 1;
				do winner.setArmies(1);
				do loser.setArmies(winnerArmies);
				do printMessage(b, conquerS);
				do conquerS.dispose();
				return true;
			}
		}
		do b.drawBoard();
		do attackS.dispose();
		do conquerS.dispose();
		return false;
	}
	
	//Handles logic for placing new armies on the board
	method void placeArmies(Board b) {		
		var int totalArmies, numArmies;
		var String terr, playerS, turnS, haveS, armiesS, terrAddS, numAddS, cheaterS;
		var char t, a;
		var Territory temp;
		let a = 65; //'A'
		let playerS = "Player ";
		let turnS = "'s turn.";
		let haveS = "You have ";
		let armiesS = " armies to place. ";
		let terrAddS = "Enter the name of the territory you wish to add armies to: ";
		let numAddS = "Enter the number of armies you wish to add: ";
		let cheaterS = "Cheater, cheater pumpkin eater. You can't add that many armies. You forfeit your army placement.";
		//Get armies
		let totalArmies = calculateArmies();
		do b.drawBoard();
		while (totalArmies > 0 ) {
			//Print instructions
			do Output.moveCursor(18, 0);
			do Output.printString(playerS);
			do Output.printInt(number);
			do Output.printString(turnS);
			do Output.println();
			do Output.printString(haveS);
			do Output.printInt(totalArmies);
			do Output.printString(armiesS);
			do Output.println();
			let terr = Keyboard.readLine(terrAddS);
			let numArmies = Keyboard.readInt(numAddS);
			//Check for valid number of armies
			if (numArmies > totalArmies) {
				do printMessage(b, cheaterS);
				do terr.dispose();
				do playerS.dispose();
				do turnS.dispose();
				do haveS.dispose();
				do armiesS.dispose();
				do terrAddS.dispose();
				do numAddS.dispose();
				do cheaterS.dispose();
				return;
			}
			//TODO: Check to make sure it's their territory
			//Convert t to an integer, subtract 'A'
			let t = terr.charAt(0);
			let t = t - a;
			//Add armies to that territory
			let temp = b.getTerritory(t);
			do temp.addArmies(numArmies);
			do b.drawBoard();
			let totalArmies = totalArmies - numArmies;
			
		}
		do terr.dispose();
		do playerS.dispose();
		do turnS.dispose();
		do haveS.dispose();
		do armiesS.dispose();
		do terrAddS.dispose();
		do numAddS.dispose();
		do cheaterS.dispose();
		return;
	}
	
	//Prints message to screen
	method void printMessage(Board b, String message) {
		var String anyKey;
		let anyKey = "Press any key to continue...";
		do b.drawBoard();
		do Output.moveCursor(18,0);
		do Output.printString(message);
		do Output.println();
		do Output.printString(anyKey);
		do Keyboard.readChar();
		do b.drawBoard();
		do anyKey.dispose();
		do message.dispose();
		return;
	}
	
	//Calculates number of armies for a player
	method int calculateArmies() {
		var int armies;
		//TODO: Algorithm for armies (based on number of continents and territories held)
		let armies = 3;
		return armies;
	}
	
	//Returns number of territories owned
	method int getTerritoriesOwned() {
		return territoriesOwned;
	}
	
	//Adds a number to the territories owned
	method void addTerritories(int num) {
		let territoriesOwned = territoriesOwned + num;
		return;
	}
	
	//Returns player's number (1 or 2)
	method int getNumber() {
		return number;
	}
	
	//Sets that a player owns a territory
	method void setTerritory(int i, boolean b) {
		let territories[i] = b;
		return;
	}
	
	//Clean it up
	method void dispose() {
		do territories.dispose();
		return;
	}

}